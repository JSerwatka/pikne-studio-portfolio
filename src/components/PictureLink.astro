---
import ArrowIcon from "@components/Icons/ArrowIcon.astro";

interface Props {
    title: string;
    subTitle: string;
}

const { title, subTitle } = Astro.props;


const textLayers = ["visible", "mask"];

// TODO handle touch screen -> use just image behind text - check here https://www.geeksforgeeks.org/how-to-detect-touch-screen-device-using-javascript/
// TODO add props for setting up img
---

<div class="relative animation-group w-min mx-auto">
    <div class="relative">
        {
            textLayers.map((layer) => {
                const isMask = layer === "mask";

                return (
                    <div
                        aria-hidden={isMask ? "true" : "false"}
                        class="cursor-none" 
                        class:list={{
                            "absolute text-lilac top-0 left-0 z-10 pointer-events-none text-mask-handler opacity-animation-target" : isMask
                        }}
                    >
                        <div class="font-metropolis text-xl uppercase">
                            {subTitle}
                        </div>
                        <div class="text-header__1 flex gap-4 items-center">
                            <ArrowIcon class={isMask ? "fill-lilac" : "fill-ruby-red"} size={50} />
                            <div>{title}</div>
                        </div>
                    </div>
                )

            })
        }
    </div>
    <img
        class="absolute w-[150px] h-[150px] top-0 left-0 object-cover object-center rounded-full pointer-events-none opacity-animation-target js-circle-img"
        src="https://assets.codepen.io/1159990/tokyo-tower.jpg"
        alt="Tokyo Tower"
    />
</div>

<style>
    .text-mask-handler {
        clip-path: circle(75px at var(--x) var(--y));
    }

    .opacity-animation-target {
        opacity: 0;
        transition: opacity 200ms ease;
    }

    .animation-group:hover .opacity-animation-target {
        opacity: 1;
    }
</style>

<script>
    const textMask = document.querySelector(".text-mask-handler") as HTMLElement;
    const cricleImage = document.querySelector(".js-circle-img") as HTMLElement;
    const textMaskRect= textMask.getBoundingClientRect();

    // variables for: disable position update when mouse far from target
    const BOUNDRY_MARGIN = 150 // px

    const leftBoundry = -BOUNDRY_MARGIN;
    const rightBoundry = BOUNDRY_MARGIN + textMaskRect.width;
    const topBoundry = -BOUNDRY_MARGIN;
    const bottomBoundry = BOUNDRY_MARGIN + textMaskRect.height;



    function showImgContent(e: MouseEvent) {

        const mouseX = e.clientX;
        const mouseY = e.clientY;
        // position relative to container (not window)
        const positionX = mouseX - textMaskRect.left;
        const positionY = mouseY - textMaskRect.top;

        const isMouseInsideBoundries = positionX > leftBoundry && 
                                       positionX < rightBoundry && 
                                       positionY > topBoundry && 
                                       positionY < bottomBoundry;

        if (isMouseInsideBoundries) {
            cricleImage.style.left = positionX - 75 + "px";
            cricleImage.style.top = positionY - 75 + "px";

            textMask.style.setProperty("--x", positionX + "px");
            textMask.style.setProperty("--y", positionY + "px");
        }
    }

    document.addEventListener("mousemove", showImgContent);
</script>
