---
import ArrowIcon from "@components/Icons/ArrowIcon.astro";
import { Image } from "astro:assets";

interface Props {
    title: string;
    subTitle: string;
    linkTo: string;
    linkAccessibleName: string;
    src: ImageMetadata;
    alt: string;
}

const { title, subTitle, linkTo, linkAccessibleName, src, alt } = Astro.props;

const textLayers = ["visible", "mask"];
---

<a href={linkTo} aria-label={linkAccessibleName} class="animation-group relative mx-auto block w-min">
    <div class="relative">
        {
            textLayers.map((layer) => {
                const isMask = layer === "mask";

                return (
                    <div
                        aria-hidden={`${isMask}`}
                        data-text-mask={`${isMask}`}
                        class="cursor-none"
                        class:list={{
                            "opacity-animation-target pointer-events-none absolute left-0 top-0 z-10 text-lilac": isMask
                        }}
                    >
                        <div class="font-metropolis text-xl uppercase">{subTitle}</div>
                        <div class="text-header__1 flex items-center gap-4">
                            <ArrowIcon class={`h-[50px] w-[50px] ${isMask ? "fill-lilac" : "fill-ruby-red"}`} />
                            <div>{title}</div>
                        </div>
                    </div>
                );
            })
        }
    </div>
    <Image
        data-circle-img
        src={src}
        width={150}
        height={150}
        alt={alt}
        class={"opacity-animation-target pointer-events-none absolute left-0 top-0 rounded-full object-cover object-center"}
    />
</a>

<style>
    [data-text-mask="true"] {
        clip-path: circle(75px at var(--x) var(--y));
    }

    .opacity-animation-target {
        opacity: 0;
        transition: opacity 200ms ease;
    }

    .animation-group:hover .opacity-animation-target {
        opacity: 1;
    }
</style>

<script>
    const textMask = document.querySelector('[data-text-mask="true"]') as HTMLElement;
    const cricleImage = document.querySelector("[data-circle-img]") as HTMLElement;
    const textMaskRect = textMask.getBoundingClientRect();

    // variables for: disable position update when mouse far from target
    const BOUNDRY_MARGIN = 150; // px

    const leftBoundry = -BOUNDRY_MARGIN;
    const rightBoundry = BOUNDRY_MARGIN + textMaskRect.width;
    const topBoundry = -BOUNDRY_MARGIN;
    const bottomBoundry = BOUNDRY_MARGIN + textMaskRect.height;

    function showImgContent(e: MouseEvent) {
        const mouseX = e.clientX;
        const mouseY = e.clientY;
        // position relative to container (not window)
        const positionX = mouseX - textMaskRect.left;
        const positionY = mouseY - textMaskRect.top;

        const isMouseInsideBoundries =
            positionX > leftBoundry && positionX < rightBoundry && positionY > topBoundry && positionY < bottomBoundry;

        if (isMouseInsideBoundries) {
            cricleImage.style.left = positionX - 75 + "px";
            cricleImage.style.top = positionY - 75 + "px";

            textMask.style.setProperty("--x", positionX + "px");
            textMask.style.setProperty("--y", positionY + "px");
        }
    }

    document.addEventListener("mousemove", showImgContent);
</script>
