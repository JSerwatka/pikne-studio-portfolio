---
interface Props {
    text: string;
    class: string;
    repeats?: number;
}

const { text, repeats = 7, class: classList } = Astro.props;

const animationDurations = "200s";
---

<div class="flex overflow-x-hidden" class:list={classList}>
    <div class="relative">
        <div class="css-marquee whitespace-nowrap">
            {
                Array(repeats)
                    .fill(0)
                    .map(() => {
                        return <span class="ml-2">{text}</span>;
                    })
            }
        </div>
        <div class="absolute top-0 css-marquee-ghost whitespace-nowrap">
            {
                Array(repeats)
                    .fill(0)
                    .map(() => {
                        return <span class="ml-2">{text}</span>;
                    })
            }
        </div>
    </div>
</div>

<style define:vars={{ animationDurations }}>
    .css-marquee {
        animation: marquee var(--animationDurations) linear 0s infinite normal;
        transform: translateX(0%);
    }

    .css-marquee-ghost {
        animation: marquee-ghost var(--animationDurations) linear 0s infinite normal;
        transform: translateX(100%);
    }

    /* 
    TODO: should I pause animation on hover
    .css-marquee:hover,
    .css-marquee-ghost:hover {
        animation-play-state: paused;
    } */

    @keyframes marquee {
        to {
            transform: translateX(-100%);
        }
    }
    @keyframes marquee-ghost {
        to {
            transform: translateX(0%);
        }
    }
</style>
