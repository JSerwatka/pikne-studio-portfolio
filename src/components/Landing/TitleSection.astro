---
import Navbar from "@components/Navbar/Navbar.astro";
import ScrollIndicator from "@components/ScrollIndicator.astro";
---

<div data-title-container class="relative h-svh overflow-hidden uppercase">
    <div data-blob>
        <svg viewBox="0 0 1000 1000" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <clipPath id="a">
                    <path
                        fill="currentColor"
                        d="M826 608q-69 108-161.5 203T421 902.5Q270 899 257 746t-85-272.5q-72-119.5 33-211T443 121q133-50 268.5 19T871 354.5Q895 500 826 608Z"
                    ></path>
                </clipPath>
                <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">
                    <stop offset="0%" style="stop-color:aquamarine;stop-opacity:0.6"></stop>
                    <stop offset="100%" style="stop-color:mediumpurple;stop-opacity:0.6"></stop>
                </linearGradient>
            </defs>
            <g clip-path="url(#a)">
                <path
                    fill="url(#gradient)"
                    d="M826 608q-69 108-161.5 203T421 902.5Q270 899 257 746t-85-272.5q-72-119.5 33-211T443 121q133-50 268.5 19T871 354.5Q895 500 826 608Z"
                ></path>
            </g>
        </svg>
    </div>
    <div data-blur></div>
    <div class="relative z-10 flex h-full flex-col">
        <Navbar />
        <div class="flex flex-grow flex-col justify-center text-center">
            <div class="text-paragraph__normal">At Pikne we are good at</div>
            <div class="mt-5 font-olympic text-[clamp(50px,5vw,125px)] leading-[1.1em]">
                translating <span class="normal-case">feelings</span>
                <span class="block">to visuals</span>
            </div>
            <div class="text-paragraph__normal">FOR BRANDS & CAMPAIGNS</div>
        </div>
        <ScrollIndicator />
    </div>
</div>

<style>
    @keyframes rotate {
        from {
            rotate: 0deg;
        }
        to {
            rotate: 360deg;
        }
    }
    [data-blob] {
        height: 80vmax;
        aspect-ratio: 1;
        position: absolute;
        left: 50%;
        top: 50%;
        translate: -50% -50%;
        animation: rotate 20s infinite;
        opacity: 0.7;
    }

    [data-blur] {
        height: 100%;
        width: 100%;
        position: absolute;
        z-index: 2;
        backdrop-filter: blur(4vmax);
    }
</style>

<script>
    const blob = document.querySelector("[data-blob]") as HTMLElement;

    const position_start = "50%";
    const position_1 = "25%";
    const position_2 = "75%";

    const blobPathPercentagesWideScreen = [
        [position_start, position_start],
        [position_1, position_1],
        [position_2, position_2],
        [position_1, position_2],
        [position_2, position_1],
        [position_start, position_start]
    ];

    const blobPathPercentagesNarrowScreen = [
        [position_start, position_start],
        [position_1, position_1],
        [position_2, position_2],
        [position_2, position_1],
        [position_1, position_2],
        [position_start, position_start]
    ];

    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    const isWideScreen = viewportWidth > viewportHeight;
    const blobPath = isWideScreen ? blobPathPercentagesWideScreen : blobPathPercentagesNarrowScreen;
    const keyframes = blobPath.map((keyframe) => ({
        left: keyframe[0],
        top: keyframe[1],
        easing: "linear"
    }));

    blob.animate(keyframes, {
        duration: 30000,
        iterations: Infinity
    });
</script>
