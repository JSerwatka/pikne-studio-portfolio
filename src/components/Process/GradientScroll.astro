---
import { Image } from "astro:assets";
import heart from "@assets/heart.svg";
// translate-y-1 h-[88%] styles that correctly position gradient scroll
---

<div data-gradient-scroll-wrapper class="relative h-full w-6 border border-ruby-red bg-gradient-brand">
    <div data-progress-mask class="progress-mask absolute bottom-0 left-0 w-full bg-light-pink"></div>
    <Image
        data-gradient-scroll-image
        class="absolute z-20 max-w-none -translate-x-[25%]"
        src={heart}
        alt="heart symbol"
        width="50"
        height="50"
    />
    <div class="grid h-full grid-rows-7 justify-center">
        {
            Array(7)
                .fill(0)
                .map((_, index) => (
                    <div
                        data-circle-stop
                        class:list={[
                            "z-10 col-span-1 col-start-1 row-span-1 h-10 w-10 justify-self-center rounded-full border border-ruby-red bg-light-pink",
                            `row-start-${index + 1}`
                        ]}
                    />
                ))
        }
    </div>
</div>

<style>
    .progress-mask {
        height: var(--height);
        transition: height 0.7s ease-out;
    }
</style>

<script>
    import { scroll, animate, inView } from "motion";

    const gradientScrollWrapper = document.querySelector("[data-gradient-scroll-wrapper]") as HTMLElement;
    const gradientScrollImage = document.querySelector("[data-gradient-scroll-image]") as HTMLElement;
    const progressMask = document.querySelector("[data-progress-mask]") as HTMLElement;

    const circleStops = document.querySelectorAll("[data-circle-stop]") as NodeListOf<HTMLElement>;

    // inView(
    //     circleStops[1],
    //     (info) => {
    //         // const controls = animate(info.target, { opacity: 1 });
    //         console.log("enter");

    //         // This will fire when the element leaves the viewport
    //         return (leaveInfo) => {
    //             console.log("leave");
    //         };
    //     },
    //     { margin: "100px 0px 0px 0px" }
    // );
    scroll(
        ({ y }) => {
            const middleOfHeartHeight = gradientScrollImage.clientHeight / 2;
            const middleOfHeartWidth = gradientScrollImage.clientWidth / 2;

            const progressToPxMapped = y.progress * (gradientScrollWrapper.clientHeight - middleOfHeartHeight);

            // height has to be inversely proportional to scroll progess - we are changing mask height
            progressMask.style.setProperty("--height", `${(1 - y.progress) * 100}%`);

            animate(
                gradientScrollImage,
                { transform: [`translate(-${middleOfHeartWidth}%, ${progressToPxMapped}px)`] },
                { duration: 0.7, easing: "ease-out" }
            );
        },
        { target: gradientScrollWrapper, offset: ["-150px start", "end center"] }
    );
</script>
