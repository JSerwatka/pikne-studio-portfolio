---
import Stepper from "./Stepper.astro";

interface Props {
    class?: string;
    step: number;
}

const { class: className, step } = Astro.props;
// TODO: adjust img sizes on screens
// TODO: make sure that it fits on one screen and is in center
// TODO: change grid to flex (mobile)
---

<div
    data-scroll-animation-container
    class:list={["min-h-screen text-dark-chocolate", "px-4", "sm:px-16", "lg:flex lg:items-center lg:pr-0", className]}
>
    <div class:list={["grid h-full grid-cols-12 grid-rows-2", "gap-y-4", "lg:flex lg:gap-y-0"]}>
        <div class:list={["self-center", "col-span-2 col-start-1 row-span-1 row-start-1", "lg:basis-1/12"]}>
            <Stepper step={step} class="[&>circle]:stroke-dark-chocolate" />
        </div>
        <div class:list={["col-span-12 row-span-1 row-start-2", "lg:basis-7/12 lg:self-center"]}>
            <div class="text-header__2 mb-6 uppercase">
                <slot name="title" /><sup class="text-paragraph__quote pl-3 align-text-top tracking-wide">({step})</sup>
            </div>
            <div class="text-paragraph__normal [&>*:not(:last-child)]:mb-8">
                <slot name="description" />
            </div>
        </div>
        <div
            class:list={[
                "w-full self-center justify-self-center ",
                "col-span-11 col-start-2 row-span-1 row-start-1",
                "lg:flex lg:basis-4/12 lg:justify-end"
            ]}
        >
            <div data-imgs-container class:list={["relative h-[300px] w-full max-w-[400px]  [&>*]:absolute"]}>
                <slot name="images" />
            </div>
        </div>
    </div>
</div>

<script>
    import { scroll, timeline, type TimelineDefinition } from "motion";
    import type { TranslationPathType, RotationPathType } from "@components/CaseStudy/AnimatedImage.astro";
    import { zip } from "@utils/zip";

    const animationContainers = document.querySelectorAll(
        "[data-scroll-animation-container]"
    ) as NodeListOf<HTMLElement>;

    // animate all sections' imgs on scroll by animation path
    animationContainers.forEach((animationContainer) => {
        const imageAnimationContainers = Array.from(
            animationContainer.querySelectorAll(
                "[data-translation-path],[data-rotation-path]"
            ) as NodeListOf<HTMLElement>
        );

        const sequence = imageAnimationContainers.map((imageAnimationContainer) => {
            const translationPath = JSON.parse(
                imageAnimationContainer.dataset.translationPath ?? "[]"
            ) as TranslationPathType;

            const rotationPath = JSON.parse(imageAnimationContainer.dataset.rotationPath ?? "[]") as RotationPathType;

            const aimationsMapped = zip(
                translationPath,
                rotationPath,
                (translationElement, rotationElement): string => {
                    const translationString = translationElement
                        ? `translate(${translationElement[0]}%, ${translationElement[1]}%)`
                        : "";
                    const rotationString = rotationElement !== undefined ? `rotate(${rotationElement}deg)` : "";

                    return [translationString, rotationString].filter(Boolean).join(",");
                }
            );

            return [imageAnimationContainer, { transform: ["translate(0, 0)", ...aimationsMapped] }, { at: "<" }];
        }) satisfies TimelineDefinition;

        const options = {
            defaultOptions: { ease: "ease" }
        };

        // scroll(timeline(sequence, options), { target: animationContainer, offset: ["25% end", "end end"] });
    });
</script>
