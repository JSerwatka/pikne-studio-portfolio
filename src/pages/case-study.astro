---
import { Image } from "astro:assets";
import { zip } from "@utils/zip";
import Layout from "../layouts/Layout.astro";

import compass from "@assets/case-study/2.1.compass.png";
import map from "@assets/case-study/2.2.map.png";
import hand from "@assets/case-study/2.3.hand.png";

import cloud from "@assets/case-study/3.2.cloud.png";
import heart from "@assets/case-study/3.1.heart.png";
import pencil from "@assets/case-study/3.3.pencil.png";

import pointer from "@assets/case-study/4.1.pointer.png";
import browser from "@assets/case-study/4.2.browser.png";
import heart2 from "@assets/case-study/4.3.heart.png";

import megaphone from "@assets/case-study/5.1.megaphone.png";
import stars from "@assets/case-study/5.2.stars.png";

import Section from "@components/CaseStudy/Section.astro";
import AnimatedImage from "@components/CaseStudy/AnimatedImage.astro";

const IMG_SIZE = 500;
---

<Layout title="test">
    <Section class="bg-lilac">
        <Fragment slot="images">
            <AnimatedImage
                data-translation-path={[
                    [-1, -1],
                    [-20, 3],
                    [30, 0]
                ]}
                data-rotation-path={[1, 2]}
            >
                <Image src={compass} alt="" width={IMG_SIZE} height={IMG_SIZE} />
            </AnimatedImage>
            <AnimatedImage
                data-translation-path={[
                    [-4, 4],
                    [-8, -4],
                    [-12, -2]
                ]}
            >
                <Image src={map} alt="" width={IMG_SIZE} height={IMG_SIZE} />
            </AnimatedImage>
            <AnimatedImage data-translation-path={[[15, 30]]}>
                <Image src={hand} alt="" width={IMG_SIZE} height={IMG_SIZE} />
            </AnimatedImage>
        </Fragment>
    </Section>
    <Section class="bg-ice-blue">
        <Fragment slot="images">
            <AnimatedImage
                data-translation-path={[
                    [-1, -1],
                    [-20, 3],
                    [30, 0]
                ]}
            >
                <Image src={cloud} alt="" width={IMG_SIZE} height={IMG_SIZE} />
            </AnimatedImage>
            <AnimatedImage
                data-translation-path={[
                    [-4, 4],
                    [-8, -4],
                    [-12, -2]
                ]}
            >
                <Image src={heart} alt="" width={IMG_SIZE} height={IMG_SIZE} />
            </AnimatedImage>
            <AnimatedImage data-translation-path={[[15, 30]]}>
                <Image src={pencil} alt="" width={IMG_SIZE} height={IMG_SIZE} />
            </AnimatedImage>
        </Fragment>
    </Section>
    <Section class="bg-tea-green">
        <Fragment slot="images">
            <AnimatedImage
                data-translation-path={[
                    [-1, -1],
                    [-20, 3],
                    [30, 0]
                ]}
            >
                <Image src={pointer} alt="" width={IMG_SIZE} height={IMG_SIZE} />
            </AnimatedImage>
            <AnimatedImage
                data-translation-path={[
                    [-4, 4],
                    [-8, -4],
                    [-12, -2]
                ]}
            >
                <Image src={browser} alt="" width={IMG_SIZE} height={IMG_SIZE} />
            </AnimatedImage>
            <AnimatedImage data-translation-path={[[15, 30]]}>
                <Image src={heart2} alt="" width={IMG_SIZE} height={IMG_SIZE} />
            </AnimatedImage>
        </Fragment>
    </Section>
    <Section class="bg-volt">
        <Fragment slot="images">
            <AnimatedImage
                data-translation-path={[
                    // [-1, -1],
                    // [-20, 3],
                    // [30, 0]
                ]}
                data-rotation-path={[10, 20, 30]}
            >
                <Image src={megaphone} alt="" width={IMG_SIZE} height={IMG_SIZE} />
            </AnimatedImage>
            <AnimatedImage
                data-translation-path={[
                    // [-4, 4],
                    // [-8, -4],
                    // [-12, -2]
                ]}
                data-rotation-path={[10, 20, 30]}
            >
                <Image src={stars} alt="" width={IMG_SIZE} height={IMG_SIZE} />
            </AnimatedImage>
        </Fragment>
    </Section>
</Layout>

<script>
    import { scroll, timeline, type TimelineDefinition } from "motion";
    import type { TranslationPathType, RotationPathType } from "@components/CaseStudy/AnimatedImage.astro";
    import { zip } from "@utils/zip";

    const animationContainers = document.querySelectorAll(
        "[data-scroll-animation-container]"
    ) as NodeListOf<HTMLElement>;

    // animate all sections' imgs on scroll by animation path
    animationContainers.forEach((animationContainer) => {
        const imageAnimationContainers = Array.from(
            animationContainer.querySelectorAll(
                "[data-translation-path],[data-rotation-path]"
            ) as NodeListOf<HTMLElement>
        );

        const sequence = imageAnimationContainers.map((imageAnimationContainer) => {
            const translationPath = JSON.parse(
                imageAnimationContainer.dataset.translationPath ?? "[]"
            ) as TranslationPathType;

            const rotationPath = JSON.parse(imageAnimationContainer.dataset.rotationPath ?? "[]") as RotationPathType;

            const aimationsMapped = zip(
                translationPath,
                rotationPath,
                (translationElement, rotationElement): string => {
                    const translationString = translationElement
                        ? `translate(${translationElement[0]}%, ${translationElement[1]}%)`
                        : "";
                    const rotationString = rotationElement !== undefined ? `rotate(${rotationElement}deg)` : "";

                    return [translationString, rotationString].filter(Boolean).join(",");
                }
            );

            return [imageAnimationContainer, { transform: ["translate(0, 0)", ...aimationsMapped] }, { at: "<" }];
        }) satisfies TimelineDefinition;

        const options = {
            defaultOptions: { ease: "ease" }
        };

        scroll(timeline(sequence, options), { target: animationContainer, offset: ["25% end", "end end"] });
    });
</script>
